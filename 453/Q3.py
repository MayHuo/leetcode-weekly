from typing import List

# dynamic programming SRTOBT
# subPro: x(i) is number of valid ways to patiton nums[:i]
# Relation: how to calculate x(i) based on x(j) j< i
# x(i) = sum(dp[j], for j < i that nums[j:i] is valid subarray(max - min) <= k
# Topological: increasing i
# Base: x(0) = 0 for empty array? x(1) = 1
# Original: x(n)
# Time: #subPro is n, each subPro O(n), so the time complexity is O(n^2)

        
from typing import List



def timer(func):
    def wrapper(*args, **kwargs):
        import datetime
        s = datetime.datetime.now()
        r = func(*args, **kwargs)
        delta = (datetime.datetime.now() - s).total_seconds()
        print(f"time spends: {delta} seconds")
        return r
    return wrapper

# Some of test cases not passed, exceed time limit.
class Solution:
    
    @timer
    def countPartitions(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [0] * (n + 1)
        dp[0] = 1  # base case: empty prefix

        for i in range(1, n + 1):
            min_val = max_val = nums[i - 1]
            # Go backward to find valid cuts ending at i
            for j in range(i - 1, -1, -1):
                min_val = min(min_val, nums[j])
                max_val = max(max_val, nums[j])
                if max_val - min_val <= k:
                    dp[i] += dp[j]
                else:
                    break  # stop early if condition is violated

        return dp[n]


#
# class Solution:
#     @timer
#     def countPartitions(self, nums: List[int], k: int) -> int:
#         n = len(nums)
#         from functools import lru_cache
#
#         @lru_cache()
#         def dfs(i):
#             if i == n:
#                 return 1
#             total = 0
#             min_val = max_val = nums[i]
#             for j in range(i, n):
#                 min_val = min(min_val, nums[j])
#                 max_val = max(max_val, nums[j])
#                 if max_val - min_val <= k:
#                     total += dfs(j + 1)
#                 else:
#                     break
#             return total
#
#         return dfs(0) % (10 ** 9 + 7)




if __name__ == '__main__':
    nums = [167420354,496570457,301987929,85112054,538781997,508292931,345372197,254630361,149317331,278608049,824251938,943619238,449491371,610463286,495691407,822069655,645178673,679215531,83627466,114380237,435612062,757404716,699663134,564977021,542843258,277083742,126783803,174902258,591342879,107145837,211604193,761729728,609422436,579625647,58050550,911670087,873902989,769383591,942247394,40635393,452893813,60269372,619621851,579151665,694047631,549576932,409347063,578878755,661073762,228939442,464211414,273331673,258129153,200803782,280539248,568427632,548161100,147230749,339494290,110156578,230275036,365885705,868256011,730513245,608876748,778931916,870637780,3080720,895583658,633814260,286291028,417437140,170081908,873281863,551242508,484881941,362696585,935583652,891894829,710603772,884586965,752326275,194592484,557530260,491820081,332458268,600127891,383685821,955024036,868337494,287607634,572508672,165707759,728665591,579744409,250351215,563935330,217985160,372550247,46019653,753595629,285743085,96477960,891987843,841791114,817771232,600670624,83501384,530968586,85854152,686969384,573484507,312954272,905012045,848689949,41458307,377062602,51356975,814592504,179556119,783277856,504125353,810082154,828347982,165040876,899369285,309316322,57970302,687792842,980477744,351031699,323734210,118059185,723467056,933174142,836604408,292064048,424169883,104096921,413593154,435100438,453910701,954068544,946777756,322807695,568903429,560553198,995897793,843546622,925028142,447043340,631614127,497348685,726128860,168534743,104152947,908495304,591455150,455191217,359921735,63799321,472972682,904373238,483872550,363595129,195067994,314516688,650552721,819385633,272460971,495193662,968579669,830875199,381921745,799112826,145564329,86853838,883301942,439809977,395453179,195893625,236853217,504800489,785042985,104044103,823676991,225406123,638240479,266027314,734820059,2509844,879961538,923196036,271989449,527908143,652356293,419233677,360634690,425269742,425841660,732586468,968371952,700453679,913545968,801042138,335537209,256690269,177805754,169131529,810698938,109986437,670724274,125357952,976208458,567675644,760912326,324058980,128354244,287268858,801471555,913197626,614483535,182417318,649063051,487402124,809998819,657701574,39978537,246543686,204393354,275207231,456993824,243739242,782732713,338510697,378980141,688492469,795112589,865373468,223210592,304408648,378507119,922713733,65832889,448691125,344235890,11108496,29332179,371753329,722033807,938701814,795683476,698526748,196640943,364019621,668656288,985311629,657942801,990761713,266959784,168454426,666863200,148735432,763296499,310380447,72139218,970818732,920692456,900367505,72308383,448464963,286651229,300374444,218269195,987055368,418018786,591846437,86157672,433974057,522841366,610895052,330040294,222161813,963445364,346169605,85757474,725356053,599734894,731121508,625473652,483231727,33498161,941258558,116676375,148785395,789136995,846192857,658647291,666045259,25478838,829910406,747177226,274332904,926394828,960577393,905644034,10979159,897054072,564451746,505697163,751509007,867202347,868616448,86377664,407892131,795544517,725171922,947798444,123253601,768644812,212793198,24994365,33013744,564955775,369597090,843811553,537408869,12201812,509448266,308986400,188219185,912603791,897245574,873880502,678496641,493345616,34451547,662652902,124239893,104435915,371472386,774003346,979167697,478134333,976757432,766032376,708822676,487758227,268610001,97068101,876558891,123838140,225761157,875421515,896380642,256120509,219430037,213153043,994392531,52534453,488174590,752215666,880449304,479734189,772395293,368717588,989999312,949919917,936228281,478151763,609675987,344205549,723679243,403162266,185158976,11018579,326825794,673617760,685775648,530469156,56642933,398287989,829831470,435175943,701375442,731511453,583394218,344384641,955081296,281133740,23916529,111363507,825873015,521982855,194483225,211841193,148011741,706395164,183927737,871097265,64708364,706910291,532059002,889971935,484449015,541240866,396916314,761208979,404529172,706085631,788403724,332425597,664647644,128830314,737002521,609555091,851311048,493688765,641426807,616141346,24155722,400303534,362521243,487199414,169057284,22056087,232402534,735833546,43419910,698079133,3169329]
    k = 990606688
    sol = Solution()
    
    r = sol.countPartitions(nums, k)
    print(r)